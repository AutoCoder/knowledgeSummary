```C++
/// quick sort code ///
#include <iostream>
using namespace std;

template<typename T>
int pivot(T* arr, int s_idx, int e_idx)
{
	int pidx = s_idx;
	std::cout << "before.." << std::endl;
	printarr(arr, 0, 11);

int low = s_idx + 1;
int high = e_idx - 1;
while (low < high)
{
	while (arr[low] < arr[pidx])
		low++;

	while (arr[high] > arr[pidx])
		high--;

	if (arr[low] > arr[high] && low < high){
		std::swap(arr[low], arr[high]);
		low++;
		high--;
	}
}

if (arr[low] < arr[pidx]){
	std::swap(arr[low], arr[pidx]);
	pidx = low;
}
else if (arr[high] < arr[pidx]){
	std::swap(arr[high], arr[pidx]);
	pidx = high;
}
else{
	std::swap(arr[low-1], arr[pidx]);
	pidx = low - 1;
}

std::cout << "after...pivot is" << pidx << std::endl;
printarr(arr, 0, 11);
return pidx;

}

template<typename T>
void qsort(T* arr, int s_idx, int e_idx)
{
	if (e_idx > s_idx)
	{
		int pidx = pivot(arr, s_idx, e_idx);
		printarr(arr, 0, 10);
		qsort(arr, s_idx, pidx);
		qsort(arr, pidx + 1, e_idx);
	}
}
```



```C++
/// heap sort code ///
template<typename T>
void heapsort(T* arr, int len)
{
	for (; len > 1; len--)
	{
		adjustheap(arr, len);
		std::swap(arr[0], arr[len - 1]);
	}
}

template<typename T>
void adjustheap(T* arr, int len)
{
	int i = (len - 2) / 2;
	for (; i >= 0; i--)
	{
		int left = 2 * i + 1;
		if (arr[i] < arr[left])
			std::swap(arr[i], arr[left]);

	int right = 2 * i + 2;
	if (right < len)
	{
		if (arr[i] < arr[right])
			std::swap(arr[i], arr[right]);
		if (arr[left] < arr[right])
			std::swap(arr[left], arr[right]);
	}
}
```

```C++
//// binrary search code ////
template<typename T>
int binary_search(T* arr, int s_idx, int e_idx, int target)
{
	while (s_idx < e_idx)
	{
		int idx = (s_idx + e_idx) / 2;
		if (arr[idx] < target)
			s_idx = idx + 1;
		else if (arr[idx] > target)
			e_idx = idx - 1;
		else{
			return idx;
		}	
	}
	return -1;
}
```

```C++
//// bubble sort code ////
void BubbleSort(int a[], int size)  
{  
    int lastSwapPos = 0,lastSwapPosTemp = 0;  
    for (int i = 0; i < size - 1; i++)  
    {  
        lastSwapPos = lastSwapPosTemp;  
        for (int j = size - 1; j >lastSwapPos; j--)  
        {  
            if (a[j - 1] > a[j])  
            {  
                int temp = a[j - 1];  
                a[j - 1] = a[j];  
                a[j] = temp;  
			   lastSwapPosTemp = j;  
		   }
        }  
    }  
    if (lastSwapPos == lastSwapPosTemp)  
        break;       
}  
```

```C++
//// main for test ////
template<typename T>
void printarr(T* arr, int s_idx, int e_idx)
{
	for (int i = s_idx; i < e_idx; i++)
		std::cout << arr[i] << " ";

	std::cout << std::endl;

}

int main()
{
	int arr[11] = { 4, 0, 5, 1, 9, 6, 2, 3, 6, 8, 7 };
	printarr(arr, 0, 11);
	//qsort(arr, 0, 11);
	heapsort(arr, 11);
	printarr(arr, 0, 11);

	int find_idx = binary_search(arr, 0, 11, 7);
	cout << "Hello,C++ world of AnycodeX!" << endl;
	return 0;

}
```

